// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prome.Viaticos.Server.Infraestructure.Persistence;

namespace Prome.Viaticos.Server.Infraestructure.Persistence.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200831135325_CashFormAmount_AddFields")]
    partial class CashFormAmount_AddFields
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.ExpenseStops", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("CapAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ConceptId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ReasonId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeStop")
                        .HasColumnType("int");

                    b.Property<DateTime>("ValidityStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("ReasonId");

                    b.ToTable("ExpenseStops");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.KmPriceConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("SubZoneId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeKm")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubZoneId");

                    b.HasIndex("UserId");

                    b.HasIndex("ZoneId");

                    b.ToTable("KmPriceConfiguration");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.LunchStops", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CapAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ValidityStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("LunchStops");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.PositionConfiguration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ConceptId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReasonId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ConceptId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ReasonId");

                    b.ToTable("PositionConfigurations");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.UserAbsenteeism", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ImportedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserAbsenteeisms");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.UserSubstitution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("ReplaceByUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReplaceByUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserSubstitutions");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashConcept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Calipso")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CostCenterId");

                    b.ToTable("CashConcepts");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("BalanceTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<string>("CashFormNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("CreditCardDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("FundTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long>("OrganismId")
                        .HasColumnType("bigint");

                    b.Property<string>("Period")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PreviousStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("SubTotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("SubTotalCoins")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalCash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalCreditCard")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalDifference")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalExpense")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("TotalPending")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TotalPendingDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("OrganismId");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("CashForms");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormAmount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("CashFormAmounts");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AuditUserId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("CashFormId");

                    b.ToTable("CashFormAudit");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CashFormId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CommentUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CashFormId");

                    b.HasIndex("CommentUserId");

                    b.ToTable("CashFormComment");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormExpense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CashConceptId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CashFormId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CostCenterId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocumentAttached")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CashConceptId");

                    b.HasIndex("CashFormId");

                    b.HasIndex("CostCenterId");

                    b.HasIndex("UserId");

                    b.ToTable("CashFormExpenses");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormMoney", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CashFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("MoneyTypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Total")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CashFormId");

                    b.HasIndex("MoneyTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CashFormMoney");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CashFormStatus");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CostCenter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("CostCenters");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.MoneyType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsCoin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("MoneyTypes");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.Organism", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Organisms");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Concept", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Form")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("ReasonId")
                        .IsRequired()
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ReasonId");

                    b.ToTable("Concepts");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Expense", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<long>("ConceptId")
                        .HasColumnType("bigint");

                    b.Property<string>("DNI")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("DocumentAttached")
                        .HasColumnType("nvarchar(400)")
                        .HasMaxLength(400);

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExpenseFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("GoogleURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageMAP")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("KM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Latitude")
                        .HasColumnType("float")
                        .HasMaxLength(50);

                    b.Property<double?>("Longitude")
                        .HasColumnType("float")
                        .HasMaxLength(50);

                    b.Property<decimal?>("MobilityAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PriceByKM")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ReasonId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RejectReasonId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestNumber")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<bool?>("RevertEnabled")
                        .HasColumnType("bit");

                    b.Property<long?>("SegmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SourceId")
                        .HasColumnType("bigint");

                    b.Property<double?>("SourceLatitude")
                        .HasColumnType("float")
                        .HasMaxLength(50);

                    b.Property<double?>("SourceLongitude")
                        .HasColumnType("float")
                        .HasMaxLength(50);

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TechnicalVisitId")
                        .HasColumnType("bigint");

                    b.Property<string>("Term")
                        .HasColumnType("nvarchar(30)")
                        .HasMaxLength(30);

                    b.Property<decimal?>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VisitResult")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("ConceptId");

                    b.HasIndex("ExpenseFormId");

                    b.HasIndex("ReasonId");

                    b.HasIndex("RejectReasonId");

                    b.HasIndex("SegmentId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TechnicalVisitId");

                    b.HasIndex("UserId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseAdvice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdviceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseAdvices");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseStatus");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ExpenseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseUsers");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Reason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Reasons");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.RejectReason", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("RejectReasons");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Segment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.TechnicalVisit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("TechnicalVisits");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("AdministratorUserId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AuthorizeUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("ExpenseFormNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsReset")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PresentationDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("PreviousStatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReviewUserId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorUserId");

                    b.HasIndex("AuthorizeUserId");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("ReviewUserId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("ExpenseForms");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AuditUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("ExpenseFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("ExpenseFormId");

                    b.ToTable("ExpenseFormAudits");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CommentUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("ExpenseFormId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CommentUserId");

                    b.HasIndex("ExpenseFormId");

                    b.ToTable("ExpenseFormComments");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("ExpenseFormStatus");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Lunch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Collaborator")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CreatedUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("EmployeeRecord")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInternalCollaborator")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LunchDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LunchFormId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LunchFormId");

                    b.HasIndex("UserId");

                    b.ToTable("Lunch");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.LunchAdvice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AdviceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<long?>("LunchId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LunchId");

                    b.ToTable("LunchAdvice");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Restaurant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long>("Cuit")
                        .HasColumnType("bigint")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.ToTable("Restaurant");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<int>("BussinesDays")
                        .HasColumnType("int");

                    b.Property<DateTime>("Cai")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CostPerLunch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExceptionResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("InvoiceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)")
                        .HasMaxLength(1);

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("Iva")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("LunchFormNumber")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("NumberOfTickets")
                        .HasColumnType("int");

                    b.Property<long?>("PreviousStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("RestaurantId")
                        .HasColumnType("bigint");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("SubTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("PreviousStatusId");

                    b.HasIndex("RestaurantId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("LunchForm");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormAudit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("AuditDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("AuditUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("LunchFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPosition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuditUserId");

                    b.HasIndex("LunchFormId");

                    b.ToTable("LunchFormAudit");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<long?>("CommentUserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<long?>("LunchFormId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommentUserId");

                    b.HasIndex("LunchFormId");

                    b.ToTable("LunchFormComment");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.ToTable("LunchFormStatus");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("SubZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("SubZoneId");

                    b.ToTable("Branches");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Management", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("HasSpecialPermissions")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Managements");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Position", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Positions");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Sector", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<bool>("HasSpecialPermissions")
                        .HasColumnType("bit");

                    b.Property<long>("ManagementId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ManagementId");

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.SubZone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("ZoneId");

                    b.ToTable("SubZones");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BranchFromId")
                        .HasColumnType("bigint");

                    b.Property<long?>("BranchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<long>("CreatedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("Cuit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DisabledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("EmployeeRecord")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("IsAdministrator")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<long>("LastModifiedBy")
                        .HasColumnType("bigint");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<long?>("ManagementId")
                        .HasColumnType("bigint");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SectorId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubZoneId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BranchFromId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ManagementId");

                    b.HasIndex("PositionId");

                    b.HasIndex("SectorId");

                    b.HasIndex("SubZoneId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.ExpenseStops", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Concept", "Concept")
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.KmPriceConfiguration", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.SubZone", "SubZone")
                        .WithMany()
                        .HasForeignKey("SubZoneId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.PositionConfiguration", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Concept", "Concept")
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.UserAbsenteeism", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.AdminAggregate.UserSubstitution", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "ReplaceByUser")
                        .WithMany()
                        .HasForeignKey("ReplaceByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashConcept", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.Organism", "Organism")
                        .WithMany()
                        .HasForeignKey("OrganismId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormStatus", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormAmount", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormAudit", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", "CashForm")
                        .WithMany("Audits")
                        .HasForeignKey("CashFormId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormComment", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", "CashForm")
                        .WithMany("Comments")
                        .HasForeignKey("CashFormId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "CommentUser")
                        .WithMany()
                        .HasForeignKey("CommentUserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormExpense", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashConcept", "CashConcept")
                        .WithMany()
                        .HasForeignKey("CashConceptId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", "CashForm")
                        .WithMany("Expenses")
                        .HasForeignKey("CashFormId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CostCenter", "CostCenter")
                        .WithMany()
                        .HasForeignKey("CostCenterId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashFormMoney", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.CashForm", "CashForm")
                        .WithMany("Cashes")
                        .HasForeignKey("CashFormId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.CashFormAggregate.MoneyType", "MoneyType")
                        .WithMany()
                        .HasForeignKey("MoneyTypeId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Concept", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Reason", "Reason")
                        .WithMany("Concepts")
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Expense", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Campaign", "Campaign")
                        .WithMany()
                        .HasForeignKey("CampaignId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Concept", "Concept")
                        .WithMany()
                        .HasForeignKey("ConceptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseForm", "ExpenseForm")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseFormId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Reason", "Reason")
                        .WithMany()
                        .HasForeignKey("ReasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.RejectReason", "RejectReason")
                        .WithMany()
                        .HasForeignKey("RejectReasonId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Segment", "Segment")
                        .WithMany()
                        .HasForeignKey("SegmentId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.TechnicalVisit", "TechnicalVisit")
                        .WithMany()
                        .HasForeignKey("TechnicalVisitId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseAdvice", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Expense", "Expense")
                        .WithMany("Advices")
                        .HasForeignKey("ExpenseId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.ExpenseUser", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseAggregate.Expense", "Expense")
                        .WithMany("ExpenseUsers")
                        .HasForeignKey("ExpenseId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseForm", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "AdministratorUser")
                        .WithMany()
                        .HasForeignKey("AdministratorUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "AuthorizeUser")
                        .WithMany()
                        .HasForeignKey("AuthorizeUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormStatus", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "ReviewUser")
                        .WithMany()
                        .HasForeignKey("ReviewUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormAudit", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseForm", "ExpenseForm")
                        .WithMany("Audits")
                        .HasForeignKey("ExpenseFormId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseFormComment", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "CommentUser")
                        .WithMany()
                        .HasForeignKey("CommentUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.ExpenseFormAggregate.ExpenseForm", "ExpenseForm")
                        .WithMany("Comments")
                        .HasForeignKey("ExpenseFormId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Lunch", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "CreatedUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchForm", "LunchForm")
                        .WithMany("Lunches")
                        .HasForeignKey("LunchFormId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.LunchAdvice", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Lunch", "Lunch")
                        .WithMany("Advices")
                        .HasForeignKey("LunchId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Restaurant", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchForm", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormStatus", "PreviousStatus")
                        .WithMany()
                        .HasForeignKey("PreviousStatusId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchAggregate.Restaurant", "Restaurant")
                        .WithMany()
                        .HasForeignKey("RestaurantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormAudit", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "AuditUser")
                        .WithMany()
                        .HasForeignKey("AuditUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchForm", "LunchForm")
                        .WithMany("Audits")
                        .HasForeignKey("LunchFormId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchFormComment", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", "CommentUser")
                        .WithMany()
                        .HasForeignKey("CommentUserId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.LunchFormAggregate.LunchForm", "LunchForm")
                        .WithMany("Comments")
                        .HasForeignKey("LunchFormId");
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.SubZone", "SubZone")
                        .WithMany()
                        .HasForeignKey("SubZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Sector", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Management", "Management")
                        .WithMany()
                        .HasForeignKey("ManagementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.SubZone", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Prome.Viaticos.Server.Domain.Entities.UserAggregate.User", b =>
                {
                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "BranchFrom")
                        .WithMany()
                        .HasForeignKey("BranchFromId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Management", "Management")
                        .WithMany()
                        .HasForeignKey("ManagementId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Sector", "Sector")
                        .WithMany()
                        .HasForeignKey("SectorId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.SubZone", "SubZone")
                        .WithMany()
                        .HasForeignKey("SubZoneId");

                    b.HasOne("Prome.Viaticos.Server.Domain.Entities.UserAggregate.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId");
                });
#pragma warning restore 612, 618
        }
    }
}
